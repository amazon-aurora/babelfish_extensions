name: 'Build Modified Postgres'
inputs:
  engine_branch:
    description: 'Engine Branch'
    required: no
    default: 'latest'
  install_dir:
    description: 'Engine install directory'
    required: no
    default: psql
  tap_tests:
    description: 'Tap Tests Enabled'
    required: no
    default: no
  code_coverage:
    description: 'Is code coverage flag needed'
    required: false
    default: 'no'
  release_mode:
    description: 'Build in Release Mode'
    required: no
    default: no

runs:
  using: "composite"
  steps:
    - name: Checkout, Build, and Install the Modified PostgreSQL Instance and Run Tests
      run: |
        cd ..
        rm -rf postgresql_modified_for_babelfish
        
        if [[ $GITHUB_EVENT_NAME == "pull_request" ]]; then
          if [[ ${{inputs.engine_branch}} == "latest" ]]; then
            ENGINE_BRANCH=$GITHUB_HEAD_REF
          else
            ENGINE_BRANCH=${{inputs.engine_branch}}
          fi            
          REPOSITORY_OWNER=$HEAD_OWNER
        else
          if [[ ${{inputs.engine_branch}} == "latest" ]]; then
            ENGINE_BRANCH=$GITHUB_REF_NAME
          else
            ENGINE_BRANCH=${{inputs.engine_branch}}
          fi
          REPOSITORY_OWNER=$GITHUB_REPOSITORY_OWNER
        fi

        $GITHUB_WORKSPACE/.github/scripts/clone_engine_repo "$REPOSITORY_OWNER" "$ENGINE_BRANCH"
        cd postgresql_modified_for_babelfish
        git rev-parse HEAD
        if [[ ${{inputs.tap_tests}} == "yes" ]]; then
          ./configure CC='ccache gcc' --prefix=$HOME/${{ inputs.install_dir }}/ --with-python PYTHON=/usr/bin/python3.8 --enable-cassert CFLAGS="-ggdb" --with-libxml --with-uuid=ossp --with-icu --enable-tap-tests --with-gssapi > /dev/null
        elif [[ ${{inputs.code_coverage}} == "yes" ]]; then
          ./configure CC='ccache gcc' --prefix=$HOME/${{ inputs.install_dir }}/ --with-python PYTHON=/usr/bin/python3.8 --enable-coverage --enable-cassert CFLAGS="-ggdb" --with-libxml --with-uuid=ossp --with-icu > /dev/null
        elif [[ ${{inputs.release_mode}} == "yes" ]]; then
            ./configure CC='ccache gcc' --prefix=$HOME/${{ inputs.install_dir }}/ --with-python PYTHON=/usr/bin/python3.8 CFLAGS="-ggdb -O2" --with-libxml --with-uuid=ossp --with-icu > /dev/null
        else
            ./configure CC='ccache gcc' --prefix=$HOME/${{ inputs.install_dir }}/ --with-python PYTHON=/usr/bin/python3.8 --enable-cassert CFLAGS="-ggdb" --with-libxml --with-uuid=ossp --with-icu > /dev/null
        fi
        make -j 4 2>error.txt
        make install > /dev/null
        cd contrib && make && sudo make install > /dev/null

        if [[ ${{inputs.engine_branch}} == *"__PG_14_"* ]]; then
          cd ../..
          rm -rf pg_hint_plan
          git clone --depth 1 --branch REL14_1_4_0 https://github.com/ossc-db/pg_hint_plan.git > /dev/null
          cd pg_hint_plan
          export PATH=$HOME/${{ inputs.install_dir }}/bin:$PATH > /dev/null
          make > /dev/null
          make install > /dev/null
        elif [[ ${{inputs.engine_branch}} == *"__PG_15_"* ]]; then
          cd ../..
          rm -rf pg_hint_plan
          git clone --depth 1 --branch REL15_1_5_1 https://github.com/ossc-db/pg_hint_plan.git > /dev/null
          cd pg_hint_plan
          export PATH=$HOME/${{ inputs.install_dir }}/bin:$PATH > /dev/null
          make > /dev/null
          make install > /dev/null
        elif [[ ${{inputs.engine_branch}} != *"__PG_13_"* ]]; then
          cd ../..
          rm -rf pg_hint_plan
          git clone --depth 1 --branch REL16_1_6_0 https://github.com/ossc-db/pg_hint_plan.git > /dev/null
          cd pg_hint_plan
          export PATH=$HOME/${{ inputs.install_dir }}/bin:$PATH > /dev/null
          make > /dev/null
          make install > /dev/null
        fi
      env:
        HEAD_OWNER: ${{ github.event.pull_request.head.repo.owner.login }}
      shell: bash

    - name: Enable Ubuntu Coredumps
      run: |
        sudo mkdir -p /var/coredumps > /dev/null
        sudo chmod a+w /var/coredumps > /dev/null
        sudo sysctl kernel.core_pattern=/var/coredumps/core-%e-%p > /dev/null
        echo 'kernel.core_pattern=/var/coredumps/core-%e-%p' | sudo tee -a /etc/sysctl.conf > /dev/null
        echo '* soft core unlimited' | sudo tee -a /etc/security/limits.conf > /dev/null
        sudo systemctl daemon-reload > /dev/null
        ulimit -c unlimited > /dev/null
        echo 'DefaultLimitCORE=Infinity' | sudo tee -a /etc/systemd/system.conf > /dev/null
        sudo systemctl daemon-reexec > /dev/null
      shell: bash
