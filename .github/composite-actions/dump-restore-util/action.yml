name: 'Dump Restore Utility'
inputs:
  engine_branch: 
    description: "Engine Branch"
    required: true
  extension_branch: 
    description: "Extension Branch"
    required: true
  is_final_ver:
    description: "Is this the final version"
    required: true
  pg_old_dir: 
    description: "Previous version was installed in this directory"
    required: true
  pg_new_dir:
    description: "Install new version in this directory"
    required: true
  migration_mode:
    description: "Database migration mode for Babelfish"
    required: true

runs:
  using: "composite"
  steps:
    - name: Build Modified Postgres using latest version
      id: build-modified-postgres-new
      if: always()
      uses: ./.github/composite-actions/build-modified-postgres
      with:
        engine_branch: ${{ inputs.engine_branch }}
        install_dir: ${{ inputs.pg_new_dir }}

    - name: Copy ANTLR
      id: copy-antlr
      if: always() && steps.build-modified-postgres-new.outcome == 'success'
      run: cp "/usr/local/lib/libantlr4-runtime.so.4.9.3" ~/${{ inputs.pg_new_dir }}/lib/
      shell: bash

    - name: Build Extensions
      id: build-extensions-new
      if: always() && steps.copy-antlr.outcome == 'success'
      uses: ./.github/composite-actions/build-extensions
      with:
        install_dir: ${{ inputs.pg_new_dir }}
        extension_branch: ${{ inputs.extension_branch }}

    - uses: actions/checkout@v2

    - name: Build tds_fdw Extension
      id: build-tds_fdw-extension
      if: always() && steps.build-extensions-new.outcome == 'success'
      uses: ./.github/composite-actions/build-tds_fdw-extension
      with:
        install_dir: ${{ inputs.pg_new_dir }}

    - name: Setup new data directory
      id: setup-new-datadir
      if: always() && steps.build-tds_fdw-extension.outcome == 'success'
      run: |
        cd ~
        ~/${{ inputs.pg_new_dir }}/bin/initdb -D ~/${{ inputs.pg_new_dir }}/data
        cd ~/${{ inputs.pg_new_dir }}/data
        sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" postgresql.conf
        sudo sed -i "s/#shared_preload_libraries = ''/shared_preload_libraries = 'babelfishpg_tds'/g" postgresql.conf
        ipaddress=$(ifconfig eth0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}')
        sudo echo "host    all             all             $ipaddress/32            trust" >> pg_hba.conf
      shell: bash

    - name: Dump and restore database
      id: run-pg_dump-restore
      if: always() && steps.setup-new-datadir.outcome == 'success'
      run: |
        echo 'Starting dump...'
        cd ~
        mkdir -p upgrade
        cd upgrade
        echo 'Runinng pg_dumpall and pg_dump'
        ~/${{ inputs.pg_new_dir }}/bin/pg_dumpall --username jdbc_user --globals-only --quote-all-identifiers --verbose -f pg_dump_globals.sql 2>>error.log
        ~/${{ inputs.pg_new_dir }}/bin/pg_dump --username jdbc_user --column-inserts --quote-all-identifiers --verbose --file="pg_dump.sql" --dbname=jdbc_testdb 2>>error.log
        ~/${{ inputs.pg_old_dir }}/bin/pg_ctl -D ~/${{ inputs.pg_old_dir }}/data stop
        echo 'Done dumping the database, proceeding to restore dumped SQL script on new server.'
        echo 'Restoring from pg_dumpall'
        ~/${{ inputs.pg_new_dir }}/bin/pg_ctl -D ~/${{ inputs.pg_new_dir }}/data -l ~/${{ inputs.pg_new_dir }}/data/logfile start
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d postgres -U runner -f pg_dump_globals.sql 2>>error.log
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d postgres -U runner -c "CREATE DATABASE jdbc_testdb OWNER jdbc_user;"
        echo 'Restoring from pg_dump'
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -f pg_dump.sql 2>>error.log
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "GRANT ALL ON SCHEMA sys to jdbc_user;"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "GRANT CREATE, CONNECT, TEMPORARY ON DATABASE jdbc_testdb TO sysadmin WITH GRANT OPTION;"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "ALTER USER jdbc_user CREATEDB;"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "ALTER SYSTEM SET babelfishpg_tsql.database_name = 'jdbc_testdb';"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "ALTER SYSTEM SET babelfishpg_tsql.migration_mode = '${{inputs.migration_mode}}';"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "SELECT pg_reload_conf();"
        cd ~/work/babelfish_extensions/babelfish_extensions/
        export PATH=/opt/mssql-tools/bin:$PATH
        sqlcmd -S localhost -U jdbc_user -P 12345678 -Q "SELECT @@version GO"
      shell: bash

    - name: Run JDBC Verify Tests
      if: always() && steps.run-pg_dump-restore.outcome == 'success' && inputs.is_final_ver == 'true'
      id: jdbc-verify-tests
      env:
        migr_mode: ${{ inputs.migration_mode }}
      run: |
        cd test/JDBC/
        touch dummy_schedule
        echo "all" > dummy_schedule
        export scheduleFile=dummy_schedule
        export isUpgradeTestMode=false

        if [[ "$migr_mode" == "multi-db" ]];then
          base_dir=${{ matrix.upgrade-path.path[0] }}
          tar_dir=${{ matrix.upgrade-path.last_version }}
          if [[ "$base_dir" == *"latest"* ]]; then
            base_dir="latest"
          fi
          if [[ "$tar_dir" == *"latest"* ]]; then
            tar_dir="latest"
          fi
          export inputFilesPath=upgrade/$tar_dir/verification_cleanup/$base_dir
        else
          base_dir="singledb"
          export inputFilesPath=upgrade/singledb/verification_cleanup
        fi
        mvn test
        export inputFilesPath=input

        # Temporarily disable certain tests until fixed
        sed -i "s/BABEL-3513/d" upgrade/$base_dir/schedule
        sed -i "s/BABEL_OBJECT_ID/d" upgrade/$base_dir/schedule
        sed -i "s/ISC-Views/d" upgrade/$base_dir/schedule
        sed -i "s/TestNotNull/d" upgrade/$base_dir/schedule
        sed -i "s/TestSQLVariant/d" upgrade/$base_dir/schedule
        sed -i "s/babel_datatype_sqlvariant/d" upgrade/$base_dir/schedule
        sed -i "s/schema_resolution_proc/d" upgrade/$base_dir/schedule
        sed -i "s/sp_tablecollations/d" upgrade/$base_dir/schedule
        sed -i "s/sys-sql_modules/d" upgrade/$base_dir/schedule
        sed -i "s/sys-system_sql_modules/d" upgrade/$base_dir/schedule

        for filename in $(grep -v "^ignore.*\|^#.*\|^cmd.*\|^all.*\|^$" upgrade/$base_dir/schedule); do
          sed -i "s/$filename[ ]*$/$filename-vu-verify\\n$filename-vu-cleanup/g" upgrade/$base_dir/schedule
        done
        export scheduleFile=upgrade/$base_dir/schedule
        mvn test
      shell: bash

    - name: Cleanup babelfish database
      id: cleanup
      if: always() && steps.jdbc-verify-tests.outcome == 'success' && inputs.is_final_ver == 'true'
      run: |
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d postgres -U runner -v user="jdbc_user" -v db="jdbc_testdb" -f .github/scripts/cleanup_babelfish_database.sql
      shell: bash