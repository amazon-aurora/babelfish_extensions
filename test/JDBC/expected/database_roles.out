-- tsql
-- Error cases
create role db_datareader; -- Error, this role already exists
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "master_db_datareader" already exists)~~


create role db_datawriter; -- Error, this role already exists
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "master_db_datawriter" already exists)~~


-- grants not allowed on these special roles
grant select on schema::dbo to db_datareader; -- Error, no grant on special roles
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot grant, deny or revoke permissions to or from special roles.)~~


grant execute on schema::dbo to db_datawriter; -- Error, no grant on special roles
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot grant, deny or revoke permissions to or from special roles.)~~


revoke select on schema::dbo from db_datareader; -- Error, no grant on special roles
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot grant, deny or revoke permissions to or from special roles.)~~


revoke execute on schema::dbo from db_datawriter; -- Error, no grant on special roles
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot grant, deny or revoke permissions to or from special roles.)~~


grant select on object::t1 to db_datareader; -- Error, no grant on special roles
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot grant, deny or revoke permissions to or from special roles.)~~


grant insert on object::t1 to db_datawriter; -- Error, no grant on special roles
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot grant, deny or revoke permissions to or from special roles.)~~


grant execute on object::t1 to db_datareader; -- Error, no grant on special roles
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot grant, deny or revoke permissions to or from special roles.)~~


revoke select on object::t1 to db_datareader; -- Error, no grant on special roles
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot grant, deny or revoke permissions to or from special roles.)~~


revoke insert on object::t1 to db_datawriter; -- Error, no grant on special roles
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot grant, deny or revoke permissions to or from special roles.)~~


revoke execute on object::t1 to db_datareader; -- Error, no grant on special roles
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot grant, deny or revoke permissions to or from special roles.)~~


drop role db_datareader; -- Error, should not be dropped
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the role 'db_datareader'.)~~


drop role db_datawriter; -- Error, should not be dropped
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the role 'db_datawriter'.)~~


-- create login, user and add members
create login l1 with password = '123';
go

create user db_datareader for login l1; -- Error, this role already exists
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "master_db_datareader" already exists)~~


create user db_datawriter for login l1; -- Error, this role already exists
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "master_db_datawriter" already exists)~~


create user u1 for login l1;
go

create role r1;
go

create schema s1;
go

create table s1.before_t1(a int);
go

create table before_t1(a int);
go

alter role db_datareader add member u1;
go

alter role db_datawriter add member u1;
go

alter role db_datareader add member r1; 
go

alter role db_datawriter add member r1; 
go

create table after_t1(a int);
go

create table s1.after_t1(a int);
go

-- tsql user=l1 password=123
-- Basic membership check
SELECT IS_MEMBER('db_datareader')
GO
~~START~~
int
1
~~END~~


SELECT IS_MEMBER('db_datawriter')
GO
~~START~~
int
1
~~END~~


select * from after_t1; -- allowed
go
~~START~~
int
~~END~~


select * from before_t1; -- allowed
go
~~START~~
int
~~END~~


insert into after_t1 values(1); -- allowed
go
~~ROW COUNT: 1~~


insert into after_t1 values(1); -- allowed
go
~~ROW COUNT: 1~~


select * from s1.after_t1; -- allowed
go
~~START~~
int
~~END~~


select * from s1.before_t1; -- allowed
go
~~START~~
int
~~END~~


insert into s1.after_t1 values(1); -- allowed
go
~~ROW COUNT: 1~~


insert into s1.after_t1 values(1); -- allowed
go
~~ROW COUNT: 1~~


-- tsql
-- Basic membership check
SELECT IS_ROLEMEMBER('db_datareader', 'u1')
GO
~~START~~
int
1
~~END~~


SELECT IS_ROLEMEMBER('db_datawriter', 'u1')
GO
~~START~~
int
1
~~END~~


SELECT IS_ROLEMEMBER('db_datareader', 'r1')
GO
~~START~~
int
1
~~END~~


SELECT IS_ROLEMEMBER('db_datawriter', 'r1')
GO
~~START~~
int
1
~~END~~


alter role db_datareader drop member u1;
go

alter role db_datawriter drop member u1;
go

alter role db_datareader drop member r1;
go

alter role db_datawriter drop member r1;
go

-- Basic membership check
SELECT IS_ROLEMEMBER('db_datareader', 'u1')
GO
~~START~~
int
<NULL>
~~END~~


SELECT IS_ROLEMEMBER('db_datawriter', 'u1')
GO
~~START~~
int
<NULL>
~~END~~


SELECT IS_ROLEMEMBER('db_datareader', 'r1')
GO
~~START~~
int
<NULL>
~~END~~


SELECT IS_ROLEMEMBER('db_datawriter', 'r1')
GO
~~START~~
int
<NULL>
~~END~~


-- tsql user=l1 password=123
-- Basic membership check
SELECT IS_MEMBER('db_datareader')
GO
~~START~~
int
0
~~END~~


SELECT IS_MEMBER('db_datawriter')
GO
~~START~~
int
0
~~END~~


select * from after_t1;  -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table after_t1)~~


select * from before_t1; -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table before_t1)~~


insert into after_t1 values(1); -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table after_t1)~~


insert into after_t1 values(1); -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table after_t1)~~


select * from s1.after_t1;  -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table after_t1)~~


select * from s1.before_t1; -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table before_t1)~~


insert into s1.after_t1 values(1); -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table after_t1)~~


insert into s1.after_t1 values(1); -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table after_t1)~~


-- tsql
exec sp_addrolemember 'db_datareader', 'u1';
go

exec sp_addrolemember 'db_datawriter', 'u1';
go

exec sp_addrolemember 'db_datareader', 'r1';
go

exec sp_addrolemember 'db_datawriter', 'r1';
go

-- tsql user=l1 password=123
-- Basic membership check
SELECT IS_MEMBER('db_datareader')
GO
~~START~~
int
1
~~END~~


SELECT IS_MEMBER('db_datawriter')
GO
~~START~~
int
1
~~END~~


select * from after_t1; -- allowed
go
~~START~~
int
1
1
~~END~~


select * from before_t1; -- allowed
go
~~START~~
int
~~END~~


insert into after_t1 values(1); -- allowed
go
~~ROW COUNT: 1~~


insert into after_t1 values(1); -- allowed
go
~~ROW COUNT: 1~~


-- tsql
-- Basic membership check
SELECT IS_ROLEMEMBER('db_datareader', 'u1')
GO
~~START~~
int
1
~~END~~


SELECT IS_ROLEMEMBER('db_datawriter', 'u1')
GO
~~START~~
int
1
~~END~~


SELECT IS_ROLEMEMBER('db_datareader', 'r1')
GO
~~START~~
int
1
~~END~~


SELECT IS_ROLEMEMBER('db_datawriter', 'r1')
GO
~~START~~
int
1
~~END~~


exec sp_droprolemember 'db_datareader', 'u1';
go

exec sp_droprolemember 'db_datawriter', 'u1';
go

exec sp_droprolemember 'db_datareader', 'r1';
go

exec sp_droprolemember 'db_datawriter', 'r1';
go

-- Basic membership check
SELECT IS_ROLEMEMBER('db_datareader', 'u1')
GO
~~START~~
int
<NULL>
~~END~~


SELECT IS_ROLEMEMBER('db_datawriter', 'u1')
GO
~~START~~
int
<NULL>
~~END~~


SELECT IS_ROLEMEMBER('db_datareader', 'r1')
GO
~~START~~
int
<NULL>
~~END~~


SELECT IS_ROLEMEMBER('db_datawriter', 'r1')
GO
~~START~~
int
<NULL>
~~END~~


-- tsql user=l1 password=123
-- Basic membership check
SELECT IS_MEMBER('db_datareader')
GO
~~START~~
int
0
~~END~~


SELECT IS_MEMBER('db_datawriter')
GO
~~START~~
int
0
~~END~~


select * from after_t1; -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table after_t1)~~


select * from before_t1; -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table before_t1)~~


insert into after_t1 values(1); -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table after_t1)~~


insert into after_t1 values(1); -- not allowed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table after_t1)~~


-- tsql
create database db1;
go

select rolname, login_name, orig_username, database_name, default_schema_name from babelfish_authid_user_ext where database_name = 'db1';
go
~~START~~
varchar#!#varchar#!#nvarchar#!#nvarchar#!#nvarchar
db1_dbo#!##!#dbo#!#db1#!#dbo
db1_db_owner#!##!#db_owner#!#db1#!#
db1_db_datareader#!##!#db_datareader#!#db1#!#
db1_db_datawriter#!##!#db_datawriter#!#db1#!#
db1_guest#!##!#guest#!#db1#!#guest
~~END~~


drop database db1;
go

select rolname, login_name, orig_username, database_name, default_schema_name from babelfish_authid_user_ext where database_name = 'db1';
go
~~START~~
varchar#!#varchar#!#nvarchar#!#nvarchar#!#nvarchar
~~END~~


-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'l1' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go
~~START~~
bool
t
~~END~~


-- Wait to sync with another session
SELECT pg_sleep(1);
go
~~START~~
void

~~END~~


-- tsql
-- drop objects
drop table s1.before_t1;
go

drop table s1.after_t1;
go

drop schema s1;
go

drop table before_t1;
go

drop table after_t1;
go

drop user u1;
go

drop role r1;
go

drop login l1;
go
