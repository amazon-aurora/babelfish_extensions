-- tsql
exec sp_execute_postgresql 'create extension if not exists pg_stat_statements';
go
select extname, extowner, extnamespace, extversion from pg_extension where extname = 'pg_stat_statements'
go

-- psql
SET pg_stat_statements.track = 'none';
SELECT pg_stat_statements_reset();
go
-- tsql
-- for accessing the extension we need to give schema qualifier i.e. [public].pg_stat_statements
SELECT dbid, toplevel, query, calls, rows, plans from [public].pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go

-- create extension without using 'if not exists' option will throw error
exec sp_execute_postgresql 'create extension pg_stat_statements';
go
exec sp_execute_postgresql 'drop extension pg_stat_statements';
go

-- throw an error if user creates anything other than allowed extensions
exec sp_execute_postgresql 'create extension pg_visibility with schema sys';
go

-- create extension with schema sys, public or by default(public), else throw error
exec sp_execute_postgresql 'create extension pg_stat_statements with schema sys';
go
select extname, extowner, extnamespace, extversion from pg_extension where extname = 'pg_stat_statements'
go
exec sp_execute_postgresql 'create extension pg_stat_statements with schema master_dbo';
go

exec sp_execute_postgresql 'drop extension pg_stat_statements';
go
-- create extension with any previous version
exec sp_execute_postgresql 'create extension pg_stat_statements with version "1.4"';
go

select extname, extowner, extnamespace, extversion from pg_extension where extname = 'pg_stat_statements'
go

-- cascade not supported yet, it will throw error
exec sp_execute_postgresql 'create extension pg_stat_statements with cascade';
go

-- throw an error if more than one statement is passed
exec sp_execute_postgresql 'create extension pg_stat_statements with schema sys; create extension pg_stat_statements';
go

--alter extension version
exec sp_execute_postgresql 'alter extension pg_stat_statements update to "1.10"';
go

select extname, extowner, extnamespace, extversion from pg_extension where extname = 'pg_stat_statements'
go

-- throw an error if user tries to alter schema
exec sp_execute_postgresql 'alter extension pg_stat_statements set schema sys'
go

-- throw an error if user tries to Add/Drop objects in extension
create table demo(A int)
go
exec sp_execute_postgresql 'alter extension pg_stat_statements add table demo'
go
drop table demo
go

-- cannot drop extension if other objects depend on it
create view pg_view as select query, queryid from [public].pg_stat_statements;
go
-- select * from pg_view
-- go
exec sp_execute_postgresql 'drop extension pg_stat_statements'
go
drop view pg_view
go

exec sp_execute_postgresql 'drop extension pg_stat_statements';
go

-- drop extension without using 'if exists' option will throw error
exec sp_execute_postgresql 'drop extension pg_stat_statements';
go
-- drop extension using 'if exists' option
exec sp_execute_postgresql 'drop extension if exists pg_stat_statements';
go


exec sp_execute_postgresql 'create extension pg_stat_statements'
go


-- Restrict option prevents the specified extensions from being dropped if other objects depend on table_schema
create view pg_view as select query, queryid from [public].pg_stat_statements;
go
exec sp_execute_postgresql 'drop extension pg_stat_statements restrict'
go
drop view pg_view
go

exec sp_execute_postgresql 'drop extension pg_stat_statements';
go
