-- tsql
-- bbf dump does not dump password so reset the password
ALTER LOGIN babel_5135_l1 WITH PASSWORD='12345678';
GO

ALTER LOGIN babel_5135_l2 WITH PASSWORD='12345678';
GO

ALTER LOGIN babel_5135_dbsecadmin_l1 WITH PASSWORD='12345678';
GO

-- CASE 1 Allowed syntaxes to modify the membership of db_securityadmin
    -- CASE 1.1 Validate ALTER ROLE ... ADD/DROP MEMBER
    -- CASE 1.2 Validate sp_addrolemember
-- tsql
ALTER ROLE db_securityadmin ADD MEMBER babel_5135_u1;
GO

ALTER ROLE db_securityadmin ADD MEMBER babel_5135_r1;
GO

EXEC sp_addrolemember 'db_securityadmin', 'babel_5135_u1';
GO

EXEC sp_addrolemember 'db_securityadmin', 'babel_5135_r1';
GO

SELECT * FROM babel_5135_show_role_mem WHERE RolePrincipalName = 'db_securityadmin';
GO

ALTER ROLE db_securityadmin DROP MEMBER babel_5135_u1;
GO

ALTER ROLE db_securityadmin DROP MEMBER babel_5135_r1;
GO

EXEC sp_droprolemember 'db_securityadmin', 'babel_5135_u1';
GO

EXEC sp_droprolemember 'db_securityadmin', 'babel_5135_r1';
GO

SELECT * FROM babel_5135_show_role_mem WHERE RolePrincipalName = 'db_securityadmin';
GO

-- CASE 2 - Only members of db_owner should be able to modify the membership of db_securityadmin
	-- [already covered by CASE 1] CASE 2.1 - Verify members of db_owner can modify the membership
	-- CASE 2.2 - Verify that members of db_securityadmin itself can't modify it's own membership
-- tsql
ALTER ROLE db_securityadmin ADD MEMBER babel_5135_dbsecadmin_u1;
GO

-- it should fail
-- tsql user=babel_5135_dbsecadmin_l1 password=12345678
ALTER ROLE db_securityadmin ADD MEMBER babel_5135_u1;
GO

ALTER ROLE db_securityadmin DROP MEMBER babel_5135_dbsecadmin_u1;
GO

-- CASE 3 - Able to manage database roles
	-- CASE 3.1 - CREATE/ALTER/DROP ROLE
	-- CASE 3.2 - ADD/DROP the membership of user-defined database roles should be allowed
	-- CASE 3.3 - ADD/DROP the membership of system-defined database roles should be blocked
	-- CASE 3.4 - CREATE/ALTER/DROP USER should not be Allowed
-- role created by another user, to test alter/drop on it
-- tsql
CREATE ROLE babel_5135_role1;
GO

-- tsql user=babel_5135_dbsecadmin_l1 password=12345678
CREATE ROLE babel_5135_role2;
GO

ALTER ROLE babel_5135_role2 WITH NAME = babel_5135_role3;
GO

DROP ROLE babel_5135_role3;
GO

ALTER ROLE babel_5135_role1 WITH NAME = babel_5135_role4;
GO

DROP ROLE babel_5135_role4;
GO

-- CASE 3.2 - ADD/DROP the membership of user-defined database roles
ALTER ROLE babel_5135_r1 ADD MEMBER babel_5135_u1;
GO

ALTER ROLE babel_5135_r1 DROP MEMBER babel_5135_u1;
GO

-- CASE 3.3 - ADD/DROP the membership of system-defined database roles should be blocked
ALTER ROLE db_accessadmin ADD MEMBER babel_5135_u1;
GO

ALTER ROLE db_owner ADD MEMBER babel_5135_u1;
GO

-- CASE 3.4 -- CREATE/ALTER/DROP USER should fail
CREATE USER babel_5135_user1 FOR LOGIN babel_5135_l2;
GO

ALTER USER babel_5135_u1 WITH NAME = babel_5135_dbsecadmin_u2;
GO

ALTER USER babel_5135_u1 WITH DEFAULT_SCHEMA=dbo;
GO

DROP USER babel_5135_u1;
GO

-- CASE 4 - CREATE SCHEMA should be allowed
CREATE SCHEMA babel_5135_sch1;
GO

CREATE SCHEMA babel_5135_sch2 AUTHORIZATION babel_5135_u1;
GO

-- ALTER/DROP of unowned schema should not be allowed
-- NOTE: Add testcase when supported
ALTER SCHEMA babel_5135_schema1 TRANSFER t33144;
GO

DROP SCHEMA babel_5135_schema1;
GO

DROP SCHEMA babel_5135_sch1;
GO

-- tsql user=babel_5135_l1 password=12345678
SELECT current_user;
GO
DROP SCHEMA babel_5135_sch2;
GO

-- CASE 5 - GRANT/REVOKE management of permissions
	-- CASE 5.1 - Validate GRANT/REVOKE of object/schema privileges
	-- CASE 5.2 - Validate members of db_securityadmin can not actually access given objects 
GRANT SELECT, INSERT, UPDATE, DELETE ON babel_5135_schema1.babel_5135_t1 TO babel_5135_u1;
GO

GRANT SELECT ON babel_5135_schema1.babel_5135_v1 TO babel_5135_u1;
GO

GRANT EXECUTE ON babel_5135_schema1.babel_5135_p1 TO babel_5135_u1;
GO

GRANT EXECUTE ON babel_5135_schema1.babel_5135_f1 TO babel_5135_u1;
GO


-- tsql user=babel_5135_l1 password=12345678
SELECT current_user;
GO

SELECT COUNT(*) FROM babel_5135_schema1.babel_5135_t1;
INSERT INTO babel_5135_schema1.babel_5135_t1 VALUES (1);
UPDATE babel_5135_schema1.babel_5135_t1 SET a = 2 WHERE a = 1;
DELETE FROM babel_5135_schema1.babel_5135_t1 WHERE a = 2;
GO

SELECT COUNT(*) FROM babel_5135_schema1.babel_5135_v1;
GO

EXEC babel_5135_schema1.babel_5135_p1;
GO

SELECT babel_5135_schema1.babel_5135_f1();
GO

-- tsql user=babel_5135_dbsecadmin_l1 password=12345678
REVOKE SELECT, INSERT, UPDATE, DELETE ON babel_5135_schema1.babel_5135_t1 FROM babel_5135_u1;
GO

REVOKE SELECT ON babel_5135_schema1.babel_5135_v1 FROM babel_5135_u1;
GO

REVOKE EXECUTE ON babel_5135_schema1.babel_5135_p1 FROM babel_5135_u1;
GO

REVOKE EXECUTE ON babel_5135_schema1.babel_5135_f1 FROM babel_5135_u1;
GO

-- tsql user=babel_5135_l1 password=12345678
SELECT current_user;
GO

SELECT COUNT(*) FROM babel_5135_schema1.babel_5135_t1;
INSERT INTO babel_5135_schema1.babel_5135_t1 VALUES (1);
UPDATE babel_5135_schema1.babel_5135_t1 SET a = 2 WHERE a = 1;
DELETE FROM babel_5135_schema1.babel_5135_t1 WHERE a = 2;
GO

SELECT COUNT(*) FROM babel_5135_schema1.babel_5135_v1;
GO

EXEC babel_5135_schema1.babel_5135_p1;
GO

SELECT babel_5135_schema1.babel_5135_f1();
GO

-- tsql user=babel_5135_dbsecadmin_l1 password=12345678
GRANT SELECT, INSERT, UPDATE, DELETE, EXECUTE ON SCHEMA::babel_5135_schema1 TO babel_5135_u1;
GO

-- tsql user=babel_5135_l1 password=12345678
SELECT current_user;
GO

SELECT COUNT(*) FROM babel_5135_schema1.babel_5135_t1;
INSERT INTO babel_5135_schema1.babel_5135_t1 VALUES (1);
UPDATE babel_5135_schema1.babel_5135_t1 SET a = 2 WHERE a = 1;
DELETE FROM babel_5135_schema1.babel_5135_t1 WHERE a = 2;
GO

SELECT COUNT(*) FROM babel_5135_schema1.babel_5135_v1;
GO

EXEC babel_5135_schema1.babel_5135_p1;
GO

SELECT babel_5135_schema1.babel_5135_f1();
GO

-- tsql user=babel_5135_dbsecadmin_l1 password=12345678
REVOKE SELECT, INSERT, UPDATE, DELETE, EXECUTE ON SCHEMA::babel_5135_schema1 FROM babel_5135_u1;
GO

-- tsql user=babel_5135_l1 password=12345678
SELECT current_user;
GO

SELECT COUNT(*) FROM babel_5135_schema1.babel_5135_t1;
INSERT INTO babel_5135_schema1.babel_5135_t1 VALUES (1);
UPDATE babel_5135_schema1.babel_5135_t1 SET a = 2 WHERE a = 1;
DELETE FROM babel_5135_schema1.babel_5135_t1 WHERE a = 2;
GO

SELECT COUNT(*) FROM babel_5135_schema1.babel_5135_v1;
GO

EXEC babel_5135_schema1.babel_5135_p1;
GO

SELECT babel_5135_schema1.babel_5135_f1();
GO

-- CASE 5.2 - Validate members of db_securityadmin can not actually access given objects 
-- tsql user=babel_5135_dbsecadmin_l1 password=12345678
SELECT current_user;
GO

SELECT COUNT(*) FROM babel_5135_schema1.babel_5135_t1;
INSERT INTO babel_5135_schema1.babel_5135_t1 VALUES (1);
UPDATE babel_5135_schema1.babel_5135_t1 SET a = 2 WHERE a = 1;
DELETE FROM babel_5135_schema1.babel_5135_t1 WHERE a = 2;
GO

SELECT COUNT(*) FROM babel_5135_schema1.babel_5135_v1;
GO

EXEC babel_5135_schema1.babel_5135_p1;
GO

SELECT babel_5135_schema1.babel_5135_f1();
GO

-- CASE 6 - is_member() / is_rolemember() testcases
-- tsql
SELECT is_member('db_securityadmin'), is_rolemember('db_securityadmin');
GO

SELECT is_rolemember('db_securityadmin', 'dbo');
GO

SELECT is_rolemember('db_securityadmin', 'db_owner');
GO

SELECT is_rolemember('db_securityadmin', 'db_accessadmin');
GO

-- tsql user=babel_5135_dbsecadmin_l1 password=12345678
SELECT is_member('db_securityadmin'), is_rolemember('db_securityadmin');
GO

-- tsql
EXEC sp_droprolemember 'db_securityadmin', 'babel_5135_dbsecadmin_u1';
GO

-- tsql user=babel_5135_dbsecadmin_l1 password=12345678
SELECT is_member('db_securityadmin'), is_rolemember('db_securityadmin');
GO

-- tsql
EXEC sp_droprolemember 'db_securityadmin', 'babel_5135_dbsecadmin_u1';
GO

-- tsql user=babel_5135_dbsecadmin_l1 password=12345678
SELECT is_member('db_securityadmin'), is_rolemember('db_securityadmin');
GO

-- CASE 7 - system procedures
 -- CASE 7.1 - sp_helpdbfixedrole testcase are covered in respective test Test-sp_helpdbfixedrole file
 -- CASE 7.2 - sp_helpuser
 -- CASE 7.3 - sp_helprole
 -- CASE 7.4 - sp_helprolemember

-- tsql user=babel_5135_dbsecadmin_l1 password=12345678
CREATE TABLE temp_sp_helpuser(UserName sys.sysname, RoleName sys.sysname, LoginName sys.sysname, 
DefDBName sys.sysname, DefSchemaName sys.sysname, UserID int, SID SYS.VARBINARY(85));
GO

CREATE TABLE temp_sp_helprole(RoleName sys.sysname, RoleId smallint, IsAppRole int);
GO

CREATE TABLE temp_sp_helprolemember(DbRole sys.sysname, MemberName sys.sysname, MemberSID SYS.VARBINARY(85));
GO

INSERT INTO temp_sp_helpuser(UserName, RoleName, LoginName, DefDBName, DefSchemaName, UserID, SID) EXEC sp_helpuser 'db_securityadmin';
GO

SELECT UserName, Rolename, LoginName, DefDBName, DefSchemaName FROM temp_sp_helpuser
where UserName = 'db_securityadmin';
GO

exec sp_helpuser 'db_securityadmin';
GO

exec sp_helprole 'db_securityadmin';
GO

exec sp_helprolemember 'sp_helprolemember';
GO

exec sp_helprole '';

-- cleanup
DROP TABLE temp_sp_helpuser;
GO

DROP TABLE temp_sp_helprole;
GO

DROP TABLE temp_sp_helprolemember;
GO

-- system views testcases

USE babel_5135_db1;
GO

SELECT name, type, type_desc, default_schema_name, is_fixed_role, authentication_type_desc FROM sys.database_principals WHERE NAME = 'db_securityadmin';
GO

USE master;
GO
