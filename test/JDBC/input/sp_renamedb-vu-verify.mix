-- tsql
-- sanity checks for metadata stored in babelfish catalog
select owner, name from sys.babelfish_sysdatabases where name = 'rename_db_database1';
select nspname, orig_name from sys.babelfish_namespace_ext where nspname LIKE 'rename_db_database%';
select rolname, login_name, orig_username, database_name from sys.babelfish_authid_user_ext where rolname LIKE 'rename_db_database%';
select rolname, default_database_name from sys.babelfish_authid_login_ext where default_database_name LIKE 'rename_db_database%';
go

-- sanity check
use rename_db_database1;
go
-- Renaming the current database is also allowed
exec sp_renamedb 'rename_db_database1' , 'rename_db_database2';
go
select db_name()
go
use rename_db_database1;
go
use rename_db_database2;
go
exec sp_renamedb 'rename_db_database2', 'rename_db_database1';
go

use master
go
exec sp_renamedb 'rename_db_database1', 'rename_db_database2';
go
-- should return updated rows
select owner, name from sys.babelfish_sysdatabases where name LIKE 'rename_db_database%';
select nspname, orig_name from sys.babelfish_namespace_ext where nspname LIKE 'rename_db_database%';
select rolname, login_name, orig_username, database_name from sys.babelfish_authid_user_ext where rolname LIKE 'rename_db_database%';
select rolname, default_database_name from sys.babelfish_authid_login_ext where default_database_name LIKE 'rename_db_database%';
go

-- sanity check to use db
use rename_db_database1;
go
use rename_db_database2;
go

use master
go

-- rollback changes
exec sp_renamedb 'rename_db_database2', 'rename_db_database1'
go

-- sp_renamedb inside transaction is allowed
Begin Transaction;
go
exec sp_renamedb 'rename_db_database2', 'rename_db_database1'
go
-- does not rollback transaction
select @@trancount
go
commit
go

-- exec sp_renamedb inside a function/procedure should pass
create function sp_renamedb_function(@a text, @b text) returns int Begin exec sp_renamedb @a, @b END
go
create procedure sp_renamedb_procedure(@a text, @b text) as exec sp_renamedb @a, @b
go

select sp_renamedb_function('rename_db_database1', 'rename_db_database2');
go
exec sp_renamedb_procedure @a = 'rename_db_database1', @b = 'rename_db_database1'
go

-- Renaming system databases is prohibited
exec sp_renamedb master modify name rename_db_database1;
go
exec sp_renamedb tempdb modify name rename_db_database1;
go
exec sp_renamedb msdb modify name rename_db_database1;
go

-- Rename a case sensitive and len>64 database name
exec sp_renamedb '[ThisOldDatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb]',
 '[ThisNewDatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb]'
go

-- should return updated rows
select owner, name from sys.babelfish_sysdatabases where name LIKE 'DatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb%';
select nspname, orig_name from sys.babelfish_namespace_ext where nspname LIKE 'DatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb%';
select rolname, login_name, orig_username, database_name from sys.babelfish_authid_user_ext where rolname LIKE 'DatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb%';
select rolname, default_database_name from sys.babelfish_authid_login_ext where default_database_name LIKE 'DatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb%';
go

-- sanity check to use db
use [ThisOldDatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb];
go
use [ThisNewDatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb]
go

use master
go

-- tsql user=rename_db_login1 password=1234
use rename_db_database1
go
-- user that does not have access to db, cannot modify name
exec sp_renamedb 'rename_db_database1', 'rename_db_database2';
go

-- tsql
-- give rename_db_login1 permission to the db
alter server role sysadmin add member rename_db_login1
go

-- tsql user=rename_db_login1 password=1234
-- should work now
exec sp_renamedb 'rename_db_database1', 'rename_db_database2';
go
-- connect to the database to test concurrencies
use rename_db_database2
go

-- tsql
-- should throw error since there is an active session using rename_db_database2
exec sp_renamedb 'rename_db_database2', 'rename_db_database1';
go

-- tsql user=rename_db_login1 password=1234
-- now disconnect from that database in the 2nd connection and test alter again
select db_name()
go
use master
go

-- tsql
exec sp_renamedb 'rename_db_database2', 'rename_db_database1';
go

drop function sp_renamedb_function
drop procedure sp_renamedb_procedure
go