-- tsql
create database db_owner_main_db
go
use db_owner_main_db
go
grant connect to guest
go
create login l1 with password = '123'
go
create user u1 for login l1
go
create login l2 with password = '123'
go
create login temp with password = '123'
go
create user u2 for login l2
go
create schema s1 authorization u1
go
create schema s2 authorization u2
go
create table dbo.t0 (x int)
go
create function dbo.f0() returns int as begin return 10 end
go
create procedure dbo.p0 as select 20
go

create role r1
go
create role r2
go

-- tsql user=l1 password=123
use db_owner_main_db
go
select is_member('db_owner')
go
create table s1.t1 (a int)
go
create function s1.f1() returns int as begin return 11 end
go
create procedure s1.p1 as select 21
go

-- tsql user=l2 password=123
use db_owner_main_db
go
select is_member('db_owner')
go
create table s2.t2 (a int)
go
create function s2.f2() returns int as begin return 12 end
go
create procedure s2.p2 as select 22
go

-- tsql
alter role db_owner add member u1
go

-- tsql user=l1 password=123
select is_member('db_owner')
go
select * from dbo.t0
go
select dbo.f0()
go
exec dbo.p0
go
select * from s1.t1
go
select s1.f1()
go
exec s1.p1
go
select * from s2.t2
go
select s2.f2()
go
exec s2.p2
go
create table s1.t11 (a int)
go
create schema s3 authorization u1
go
create table s3.t3 (a int)
go
create function s3.f3() returns int as begin return 13 end
go
create procedure s3.p3 as select 23
go

grant select on schema::s1 to u2
go
grant insert on schema::s2 to guest
go
grant update on schema::s3 to u2
go
grant delete on schema::dbo to u2
go
grant select on object::dbo.t0 to u2
go
grant insert on object::s1.t1 to u2
go
grant update on object::s2.t2 to u1
go
grant delete on object::s3.t3 to u2
go
grant execute on object::s1.f1 to u1
go
grant execute on object::s3.p3 to u1
go

-- psql
select schema_name, object_name, permission, grantee, grantor from sys.babelfish_schema_permissions
where grantee IN ('db_owner_main_db_guest', 'db_owner_main_db_u1', 'db_owner_main_db_u2') order by permission;
GO

-- tsql user=l1 password=123
revoke select on schema::s1 to u2
go
revoke insert on schema::s2 to guest
go
revoke update on schema::s3 to u2
go
revoke delete on schema::dbo to u2
go
revoke select on object::dbo.t0 to u2
go
revoke insert on object::s1.t1 to u2
go
revoke update on object::s2.t2 to u1
go
revoke delete on object::s3.t3 to u2
go
revoke execute on object::s1.f1 to u1
go
revoke execute on object::s3.p3 to u1
go

-- psql
select schema_name, object_name, permission, grantee, grantor from sys.babelfish_schema_permissions
where grantee IN ('db_owner_main_db_guest', 'db_owner_main_db_u1', 'db_owner_main_db_u2') order by permission;
GO

-- CASE : ALTER ANY USER
-- tsql user=l1 password=123
select rolname, login_name, default_schema_name, default_language_name from babelfish_authid_user_ext where rolname like 'db_owner_main_db_new_%'
go
alter user u1 with default_schema = s1
go
alter user u1 with name = new_u1
go
alter user u2 with default_schema = dbo
go
alter user u2 with login = temp
go
alter user u2 with name = new_u2
go
select rolname, login_name, default_schema_name, default_language_name from babelfish_authid_user_ext where rolname like 'db_owner_main_db_new_%'
go
select sys.user_name(), sys.suser_name(), is_member('db_owner')
go
alter user new_u2 with default_schema = dbo
go
alter user new_u2 with login = l2
go
alter user new_u2 with name = u2
go
alter user new_u1 with login = temp
go
select sys.user_name(), sys.suser_name(), is_member('db_owner')
go
select database_name, rolname, login_name, default_schema_name, default_language_name from sys.babelfish_authid_user_ext where rolname like 'db_owner_main_db_new_%'
go
alter user new_u1 with login = l1
go
alter user new_u1 with name = u1
go
select rolname, login_name, default_schema_name, default_language_name from babelfish_authid_user_ext where rolname like 'db_owner_main_db_new_%'
go
select name from sys.database_principals order by name
go

-- tsql
alter role db_owner drop member new_u1
go
alter role db_owner add member new_u1
go
alter user new_u1 with login = l1
go

-- terminate-tsql-conn user=l1 password=123

-- tsql user=l1 password=123
use db_owner_main_db
go
select sys.user_name(), is_member('db_owner')
go
alter user new_u1 with name = u1
go
select rolname, login_name, default_schema_name, default_language_name from babelfish_authid_user_ext where rolname like 'db_owner_main_db_new_%'
go
select name from sys.database_principals order by name
go

-- tsql user=l2 password=123
select is_member('db_owner')
go
select * from dbo.t0
go
select dbo.f0()
go
exec dbo.p0
go
select * from s1.t1
go
select s1.f1()
go
exec s1.p1
go
select * from s2.t2
go
select s2.f2()
go
exec s2.p2
go
select * from s1.t11
go
select * from s3.t3
go
select s3.f3()
go
exec s3.p3
go

select name from sys.database_principals order by name
go

-- psql
-- Procedure/function owners should be db_owner_main_db_u1_obj
SELECT proname,
       proowner::regrole
FROM pg_proc
WHERE pronamespace::regnamespace::text = 'db_owner_main_db_s1'
OR pronamespace::regnamespace::text = 'db_owner_main_db_s3'
ORDER BY proname;
GO

-- Table owners should be db_owner_main_db_u1_obj
SELECT
    n.nspname AS schema,
    c.relname AS table,
    CASE c.relkind
        WHEN 'r' THEN 'table'
        WHEN 'v' THEN 'view'
        WHEN 'm' THEN 'materialized view'
        WHEN 'i' THEN 'index'
        WHEN 'S' THEN 'sequence'
        WHEN 's' THEN 'special'
        WHEN 'f' THEN 'foreign table'
    END AS type,
    pg_catalog.pg_get_userbyid(c.relowner) AS owner
FROM pg_catalog.pg_class c
LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE (n.nspname = 'db_owner_main_db_s1' OR n.nspname = 'db_owner_main_db_s3')
AND c.relkind IN ('r', 'v', 'm', 'i', 'S', 's', 'f')
ORDER BY n.nspname, c.relkind, c.relname;
GO

-- Schema owners should be db_owner_main_db_u1_obj
SELECT
    r.rolname AS schema_owner,
    ns.nspname
FROM
    pg_namespace ns
JOIN
    pg_roles r 
ON
    ns.nspowner = r.oid
WHERE
    ns.nspname = 'db_owner_main_db_s1'
OR
    ns.nspname = 'db_owner_main_db_s3'
ORDER BY ns.nspname;
GO

-- tsql
select * from dbo.t0
go
select dbo.f0()
go
exec dbo.p0
go
select * from s1.t1
go
select s1.f1()
go
exec s1.p1
go
select * from s2.t2
go
select s2.f2()
go
exec s2.p2
go
select * from s1.t11
go
select * from s3.t3
go
select s3.f3()
go
exec s3.p3
go

select name from sys.database_principals order by name
go

alter role db_owner drop member u1
go

-- tsql user=l1 password=123
select is_member('db_owner')
go
select * from dbo.t0
go
select dbo.f0()
go
exec dbo.p0
go
select * from s1.t1
go
select s1.f1()
go
exec s1.p1
go
select * from s2.t2
go
select s2.f2()
go
exec s2.p2
go
select * from s1.t11
go
select * from s3.t3
go
select s3.f3()
go
exec s3.p3
go

create role r3
go
create role r4
go
create user temp for login temp
go
alter role r1 add member u2
go
drop user u2
go
drop role r1
go
drop role r2
go

-- psql
-- Procedure/function owners should be db_owner_main_db_u1
SELECT proname,
       proowner::regrole
FROM pg_proc
WHERE pronamespace::regnamespace::text = 'db_owner_main_db_s1'
OR pronamespace::regnamespace::text = 'db_owner_main_db_s3'
ORDER BY proname;
GO

-- Table owners should be db_owner_main_db_u1
SELECT
    n.nspname AS schema,
    c.relname AS table,
    CASE c.relkind
        WHEN 'r' THEN 'table'
        WHEN 'v' THEN 'view'
        WHEN 'm' THEN 'materialized view'
        WHEN 'i' THEN 'index'
        WHEN 'S' THEN 'sequence'
        WHEN 's' THEN 'special'
        WHEN 'f' THEN 'foreign table'
    END AS type,
    pg_catalog.pg_get_userbyid(c.relowner) AS owner
FROM pg_catalog.pg_class c
LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE (n.nspname = 'db_owner_main_db_s1' OR n.nspname = 'db_owner_main_db_s3')
AND c.relkind IN ('r', 'v', 'm', 'i', 'S', 's', 'f')
ORDER BY n.nspname, c.relkind, c.relname;
GO

-- Schema owners should be db_owner_main_db_u1
SELECT
    r.rolname AS schema_owner,
    ns.nspname
FROM
    pg_namespace ns
JOIN
    pg_roles r 
ON
    ns.nspowner = r.oid
WHERE
    ns.nspname = 'db_owner_main_db_s1'
OR
    ns.nspname = 'db_owner_main_db_s3'
ORDER BY ns.nspname;
GO

-- tsql
alter role db_owner add member u1
go

-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL) 
WHERE sys.suser_name(usesysid) = 'l2' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
GO
-- Wait to sync with another session
SELECT pg_sleep(1);
GO

-- tsql user=l1 password=123
select is_member('db_owner')
go

create role r3
go
create role r4
go
create user temp for login temp
go
alter role r1 add member temp
go
alter role r3 add member temp
go
alter role r3 add member r1
go
alter role r4 add member r2
go
drop user temp
go
drop role r1
go
drop role r2
go
drop role r3
go
drop role r4
go

drop table dbo.t0
go
drop function dbo.f0
go
drop procedure dbo.p0
go
drop table s1.t1
go
drop function s1.f1
go
drop procedure s1.p1
go
drop table s2.t2
go
drop function s2.f2
go
drop procedure s2.p2
go
drop table s1.t11
go
drop table s3.t3
go
drop function s3.f3
go
drop procedure s3.p3
go
drop schema s1
go
drop schema s2
go
drop schema s3
go
drop user u2
go

-- tsql
alter role db_owner drop member u1
go

-- tsql user=l1 password=123
select is_member('db_owner')
go

-- Check if db_owner can drop the database
-- tsql
create database db_owner_test_db
go
use db_owner_test_db
go
create user db_owner_test_db_u1 for login l1
go
alter role db_owner add member db_owner_test_db_u1
go
use db_owner_main_db
go

-- tsql user=l1 password=123
select sys.user_name()
go
select is_member('db_owner')
go
drop database db_owner_test_db
go

-- Check if there can be multiple db_owners
-- tsql
create database db_owner_test_db
go
use db_owner_test_db
go
create user db_owner_test_db_u1 for login l1
go
alter role db_owner add member db_owner_test_db_u1
go
use master
go

-- Add another user but as db_owner
-- tsql user=l1 password=123
use db_owner_test_db
go
select is_member('db_owner')
go
create user db_owner_test_db_u2 for login l2
go

-- tsql
use db_owner_test_db
go
alter role db_owner add member db_owner_test_db_u2
go
select is_rolemember('db_owner', 'db_owner_test_db_u1'), is_rolemember('db_owner', 'db_owner_test_db_u2')
go
use db_owner_main_db
go

-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL) 
WHERE sys.suser_name(usesysid) = 'l1' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
GO
-- Wait to sync with another session
SELECT pg_sleep(1);
GO


-- Check if dropping user, also drops the linked "_obj" role
-- psql
select rolname from pg_authid where rolname like 'db_owner_test_db_%' order by rolname;
go

-- tsql
use db_owner_test_db
go
drop user db_owner_test_db_u1
go
drop user db_owner_test_db_u2
go
use db_owner_main_db
go

-- psql
select rolname from pg_authid where rolname like 'db_owner_test_db_%' order by rolname;
go

-- tsql
drop database db_owner_test_db
go
drop user u1
go
drop login l1
go
drop login l2
go
drop login temp
go
revoke connect from guest
go
use master
go
drop database db_owner_main_db
go
